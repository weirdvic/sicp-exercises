#lang sicp

;; Упражнение 1.12.

;; Приведённая ниже таблица называется треугольником Паскаля.

;;     1
;;    1 1
;;   1 2 1
;;  1 3 3 1
;; 1 4 6 4 1

;; Все числа по краям треугольника равны 1, а каждое число внутри
;; треугольника равно сумме двух чисел над ним. Напишите процедуру,
;; вычисляющую элементы треугольника Паскаля с помощью рекурсивного
;; процесса.

;; Решение:

;; Чтобы написать функцию, вычисляющую элементы треугольника Паскаля,
;; нужно условиться об адресации этих элементов. Удобным с точки зрения
;; программирования является представление в виде n пронумерованых строк,
;; где каждая строка состоит из k чисел.
;; При этом треугольник принимает следующий вид:

;;  _____ k == 0
;; |
;; 1----- n == 0
;; 11
;; 121  _____ k == 4
;; 1331|
;; 14641----- n == 4

;; После этого, используя данную адресацию и рекурсивную формулу для
;; вычисления произвольного элемента с Википедии, мы можем написать функцию.
;; Ссылка на формулу: https://en.wikipedia.org/wiki/Pascal%27s_triangle#Formula

(define (pascal-element n k)
  (cond ((or (< n 0)
             (or (< k 0) (> k n)))
         0)
        ((and (= n 0) (= k 0)) 1)
        (else (+ (pascal-element (- n 1) (- k 1))
                 (pascal-element (- n 1) k)))))

;; Имея функцию для вычисления отдельных элементов, мы можем написать функцию
;; для вывода треугольника Паскаля произвольного порядка в текстовом виде.

;; Вывести n строку треугольника, где вершина -- n == 0.
(define (pascal-row n)
  (define (column-iter i)
    (display (pascal-element n i))
    (display " ")
    (if (= i n)
        (newline)
        (column-iter (+ i 1))))
  (column-iter 0))

(define (pascal-triangle n)
  (define (pascal-iter i)
    (pascal-row i)
    (if (= i n)
        (newline)
        (pascal-iter (+ i 1))))
  (pascal-iter 0))

;; Проверяем результат:
(pascal-triangle 4)
